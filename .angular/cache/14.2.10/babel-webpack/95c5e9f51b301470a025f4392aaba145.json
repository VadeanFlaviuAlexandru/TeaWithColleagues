{"ast":null,"code":"import _asyncToGenerator from \"D:/CodingStuff/GitHub/TeaWithColleagues/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport listPlugin from '@fullcalendar/list';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport { environment } from 'src/environments/environment';\nimport { createEventId, INITIAL_EVENTS } from './event-utils';\nlet ScheduleComponent = class ScheduleComponent {\n  constructor(changeDetector, IdUserService, http, fb) {\n    this.changeDetector = changeDetector;\n    this.IdUserService = IdUserService;\n    this.http = http;\n    this.fb = fb;\n    this.selectedName = 'default';\n    this.idUser = 0;\n    this.UserName = 'default';\n    this.location = 'default';\n    this.UserSurname = 'default';\n    this.UserPhoneNumber = 'default';\n    this.success = false;\n    this.failure = false;\n    this.CreateEvent = false;\n    this.DoneCreateEvent = false;\n    this.title = 'default';\n    this.currentEventClicked = 'default';\n    this.currentEventClickedLOCATION = 'default';\n    this.currentEventClickedDATE = 'default';\n    this.currentEventClickedDATEsub = 'default';\n    this.deleteEvent = false;\n    this.createEvent = false;\n    this.Participant = false;\n    this.ParticipantDONE = false;\n    this.names = [\"default\"];\n    this.EditForm = new FormGroup({\n      name: new FormControl(),\n      surname: new FormControl(),\n      phoneNumber: new FormControl()\n    });\n    this.CreateEventForm = new FormGroup({\n      title: new FormControl(),\n      location: new FormControl(),\n      hourStart: new FormControl(),\n      hourEnd: new FormControl()\n    });\n    this.SendAvailability = new FormGroup({\n      date: new FormControl(),\n      time: new FormControl()\n    });\n    this.calendarVisible = true;\n    this.calendarOptions = {\n      plugins: [dayGridPlugin, timeGridPlugin, listPlugin, interactionPlugin],\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'\n      },\n      initialView: 'dayGridMonth',\n      initialEvents: INITIAL_EVENTS,\n      weekends: true,\n      editable: true,\n      selectable: true,\n      selectMirror: true,\n      dayMaxEvents: true,\n      locale: 'ro',\n      select: this.handleDateSelect.bind(this),\n      eventClick: this.handleEventClick.bind(this),\n      eventsSet: this.handleEvents.bind(this)\n    };\n    this.currentEvents = [];\n    this.myDialog5 = new ElementRef(null);\n\n    selectedName: [null];\n  }\n\n  ngOnInit() {\n    this.idUser = this.IdUserService.getIdUser();\n    console.log('On schedule page with id:');\n    console.log(this.idUser);\n    this.GetUserInfo();\n  }\n\n  GETallAvailabilities() {\n    return this.http.get(`${environment.BaseUrl}/Availability/get-all-availabilities`, {});\n  }\n\n  reset() {\n    this.success = false;\n    this.failure = false;\n  }\n\n  FinishEdit() {\n    let UserE = {\n      idUser: this.idUser,\n      name: this.EditForm.get('name')?.value,\n      surname: this.EditForm.get('surname')?.value,\n      phoneNumber: this.EditForm.get('phoneNumber')?.value\n    };\n    this.EditUser(UserE).subscribe(response => {\n      if (response.statusText == 'OK') {\n        this.success = true;\n      } else {\n        this.failure = false;\n      }\n    });\n  }\n\n  EditUser(UserE) {\n    return this.http.put(`${environment.BaseUrl}/User/edit-user`, UserE, {\n      observe: 'response',\n      responseType: 'text'\n    });\n  }\n\n  GetUserInfo() {\n    this.SendUserID().subscribe(response => {\n      const responseBody = JSON.parse(response.body);\n      this.UserName = responseBody.name;\n      this.UserSurname = responseBody.surname;\n      this.UserPhoneNumber = responseBody.phoneNumber;\n    });\n  }\n\n  SendUserID() {\n    return this.http.get(`${environment.BaseUrl}/User/get-user-by-id?id=${this.idUser}`, {\n      observe: 'response',\n      responseType: 'text'\n    });\n  }\n\n  handleCalendarToggle() {\n    this.calendarVisible = !this.calendarVisible;\n  }\n\n  handleWeekendsToggle() {\n    const {\n      calendarOptions\n    } = this;\n    calendarOptions.weekends = !calendarOptions.weekends;\n  }\n\n  handleDateSelect(selectInfo) {\n    const dialog = this.myDialog5.nativeElement;\n    dialog.show();\n\n    const closeListener = () => {\n      this.title = this.CreateEventForm.get('title')?.value;\n      this.location = this.CreateEventForm.get('location')?.value;\n      const startHour = this.CreateEventForm.get('hourStart')?.value;\n      const endHour = this.CreateEventForm.get('hourEnd')?.value;\n      this.GETallAvailabilities().subscribe(response => {\n        const filteredArray = response.filter(item => {\n          const date = new Date(item.startDate);\n          const hour = date.getUTCHours();\n          return hour >= startHour && hour <= endHour;\n        });\n        console.log(filteredArray); // this.names = filteredArray.map((item) => item.apiUser.name);\n        // const select = document.getElementById('dropdown');\n        // select.innerHTML = '';\n        // names.forEach((name) => {\n        //   const option = document.createElement('option');\n        //   option.value = name;\n        //   option.text = name;\n        //   select.appendChild(option);\n        // });\n      });\n      this.SavingTitle(selectInfo);\n      dialog.removeEventListener('close', closeListener);\n    };\n\n    dialog.addEventListener('close', closeListener);\n    this.CreateEventForm.get('title')?.reset();\n    this.Participant = false;\n  }\n\n  SavingTitle(selectInfo) {\n    const titleINPUT = this.title;\n    const calendarApi = selectInfo.view.calendar;\n    const locationINPUT = this.location;\n    calendarApi.unselect();\n\n    if (titleINPUT) {\n      calendarApi.addEvent({\n        id: createEventId(),\n        title: titleINPUT,\n        start: selectInfo.startStr,\n        end: selectInfo.endStr,\n        allDay: selectInfo.allDay,\n        location: locationINPUT\n      });\n    }\n  }\n\n  handleEventClick(clickInfo) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const dialog = _this.myDialog6.nativeElement;\n      _this.currentEventClicked = clickInfo.event.title;\n      _this.currentEventClickedLOCATION = clickInfo.event.extendedProps['location'];\n      _this.currentEventClickedDATEsub = clickInfo.event.start?.toString();\n      _this.currentEventClickedDATE = _this.currentEventClickedDATEsub.substring(0, 15);\n      const dateC = new Date(_this.currentEventClickedDATE);\n      const formatDate = new Date(dateC.toUTCString()).toISOString();\n      console.log(formatDate);\n      dialog.show();\n\n      while (!_this.deleteEvent) {\n        yield new Promise(resolve => setTimeout(resolve, 500));\n      }\n\n      clickInfo.event.remove();\n      _this.deleteEvent = false;\n      console.log(_this.deleteEvent);\n    })();\n  }\n\n  AddAvailability() {\n    const dialog = this.myDialog2.nativeElement;\n    dialog.show();\n    const date = this.SendAvailability.get('date')?.value;\n    const time = this.SendAvailability.get('time')?.value;\n    const datetime = new Date(date + 'T' + time);\n    const id = this.idUser;\n    let POSTavailability = {\n      startDate: datetime.toISOString()\n    };\n    console.log(\"id\", POSTavailability, \"POSTavailability\", POSTavailability);\n    this.POSTAvailability(id, POSTavailability).subscribe(response => {\n      console.log(response);\n    });\n    dialog.close();\n  }\n\n  POSTAvailability(id, availability) {\n    return this.http.post(`${environment.BaseUrl}/Availability/users/${id}/availability`, availability, {\n      observe: 'response',\n      responseType: 'text'\n    });\n  }\n\n  handleEvents(events) {\n    this.currentEvents = events;\n    this.changeDetector.detectChanges();\n  }\n\n};\n\n__decorate([ViewChild('myDialog5')], ScheduleComponent.prototype, \"myDialog5\", void 0);\n\n__decorate([ViewChild('myDialog6')], ScheduleComponent.prototype, \"myDialog6\", void 0);\n\n__decorate([ViewChild('myDialog2')], ScheduleComponent.prototype, \"myDialog2\", void 0);\n\n__decorate([ViewChild('dropdown')], ScheduleComponent.prototype, \"dropdown\", void 0);\n\nScheduleComponent = __decorate([Component({\n  selector: 'app-schedule',\n  templateUrl: './schedule.component.html',\n  styleUrls: ['./schedule.component.scss']\n})], ScheduleComponent);\nexport { ScheduleComponent };","map":{"version":3,"mappings":"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","names":["Component","ElementRef","ViewChild","FormControl","FormGroup","dayGridPlugin","interactionPlugin","listPlugin","timeGridPlugin","environment","createEventId","INITIAL_EVENTS","ScheduleComponent","constructor","changeDetector","IdUserService","http","fb","name","surname","phoneNumber","title","location","hourStart","hourEnd","date","time","plugins","headerToolbar","left","center","right","initialView","initialEvents","weekends","editable","selectable","selectMirror","dayMaxEvents","locale","select","handleDateSelect","bind","eventClick","handleEventClick","eventsSet","handleEvents","myDialog5","selectedName","ngOnInit","idUser","getIdUser","console","log","GetUserInfo","GETallAvailabilities","get","BaseUrl","reset","success","failure","FinishEdit","UserE","EditForm","value","EditUser","subscribe","response","statusText","put","observe","responseType","SendUserID","responseBody","JSON","parse","body","UserName","UserSurname","UserPhoneNumber","handleCalendarToggle","calendarVisible","handleWeekendsToggle","calendarOptions","selectInfo","dialog","nativeElement","show","closeListener","CreateEventForm","startHour","endHour","filteredArray","filter","item","Date","startDate","hour","getUTCHours","SavingTitle","removeEventListener","addEventListener","Participant","titleINPUT","calendarApi","view","calendar","locationINPUT","unselect","addEvent","id","start","startStr","end","endStr","allDay","clickInfo","myDialog6","currentEventClicked","event","currentEventClickedLOCATION","extendedProps","currentEventClickedDATEsub","toString","currentEventClickedDATE","substring","dateC","formatDate","toUTCString","toISOString","deleteEvent","Promise","resolve","setTimeout","remove","AddAvailability","myDialog2","SendAvailability","datetime","POSTavailability","POSTAvailability","close","availability","post","events","currentEvents","detectChanges","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\CodingStuff\\GitHub\\TeaWithColleagues\\src\\app\\schedule\\schedule.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport {\r\n  CalendarOptions,\r\n  DateSelectArg,\r\n  EventApi,\r\n  EventClickArg,\r\n} from '@fullcalendar/core';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport listPlugin from '@fullcalendar/list';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport { environment } from 'src/environments/environment';\r\nimport { IdUserService } from '../id-user.service';\r\nimport { UserE } from '../models/UserE';\r\nimport { createEventId, INITIAL_EVENTS } from './event-utils';\r\nimport { POSTavailability } from '../models/POSTavailability';\r\nimport { GETavailabilities } from '../models/GETavailabilities';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-schedule',\r\n  templateUrl: './schedule.component.html',\r\n  styleUrls: ['./schedule.component.scss'],\r\n})\r\nexport class ScheduleComponent implements OnInit {\r\n  @ViewChild('myDialog5') myDialog5?: ElementRef;\r\n  @ViewChild('myDialog6') myDialog6?: ElementRef;\r\n  @ViewChild('myDialog2') myDialog2?: ElementRef;\r\n  @ViewChild('dropdown') dropdown?: ElementRef;\r\n\r\n  selectedName:string = 'default';\r\n  idUser: number = 0;\r\n  UserName: string = 'default';\r\n  location: string = 'default';\r\n  UserSurname: string = 'default';\r\n  UserPhoneNumber: string = 'default';\r\n  success = false;\r\n  failure = false;\r\n  CreateEvent = false;\r\n  DoneCreateEvent = false;\r\n  title: string = 'default';\r\n  currentEventClicked: string = 'default';\r\n  currentEventClickedLOCATION: string = 'default';\r\n  currentEventClickedDATE: string = 'default'!;\r\n  currentEventClickedDATEsub: string = 'default';\r\n  deleteEvent = false;\r\n  createEvent = false;\r\n  Participant = false;\r\n  ParticipantDONE = false;\r\n  names:string[] = [\"default\"];\r\n\r\n  ngOnInit(): void {\r\n    this.idUser = this.IdUserService.getIdUser();\r\n    console.log('On schedule page with id:');\r\n    console.log(this.idUser);\r\n    this.GetUserInfo();\r\n  }\r\n\r\n  GETallAvailabilities() {\r\n    return this.http.get<GETavailabilities[]>(\r\n      `${environment.BaseUrl}/Availability/get-all-availabilities`,\r\n      {}\r\n    );\r\n  }\r\n  reset() {\r\n    this.success = false;\r\n    this.failure = false;\r\n  }\r\n\r\n  EditForm = new FormGroup({\r\n    name: new FormControl(),\r\n    surname: new FormControl(),\r\n    phoneNumber: new FormControl(),\r\n  });\r\n  CreateEventForm = new FormGroup({\r\n    title: new FormControl(),\r\n    location: new FormControl(),\r\n    hourStart: new FormControl(),\r\n    hourEnd: new FormControl(),\r\n  });\r\n  SendAvailability = new FormGroup({\r\n    date: new FormControl(),\r\n    time: new FormControl(),\r\n  });\r\n  FinishEdit() {\r\n    let UserE: UserE = {\r\n      idUser: this.idUser,\r\n      name: this.EditForm.get('name')?.value,\r\n      surname: this.EditForm.get('surname')?.value,\r\n      phoneNumber: this.EditForm.get('phoneNumber')?.value,\r\n    };\r\n    this.EditUser(UserE).subscribe((response) => {\r\n      if (response.statusText == 'OK') {\r\n        this.success = true;\r\n      } else {\r\n        this.failure = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  EditUser(UserE: any) {\r\n    return this.http.put(`${environment.BaseUrl}/User/edit-user`, UserE, {\r\n      observe: 'response',\r\n      responseType: 'text',\r\n    });\r\n  }\r\n\r\n  GetUserInfo() {\r\n    this.SendUserID().subscribe((response) => {\r\n      const responseBody = JSON.parse(response.body!);\r\n      this.UserName = responseBody.name;\r\n      this.UserSurname = responseBody.surname;\r\n      this.UserPhoneNumber = responseBody.phoneNumber;\r\n    });\r\n  }\r\n\r\n  SendUserID() {\r\n    return this.http.get(\r\n      `${environment.BaseUrl}/User/get-user-by-id?id=${this.idUser}`,\r\n      {\r\n        observe: 'response',\r\n        responseType: 'text',\r\n      }\r\n    );\r\n  }\r\n\r\n  calendarVisible = true;\r\n  calendarOptions: CalendarOptions = {\r\n    plugins: [dayGridPlugin, timeGridPlugin, listPlugin, interactionPlugin],\r\n    headerToolbar: {\r\n      left: 'prev,next today',\r\n      center: 'title',\r\n      right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek',\r\n    },\r\n    initialView: 'dayGridMonth',\r\n    initialEvents: INITIAL_EVENTS,\r\n    weekends: true,\r\n    editable: true,\r\n    selectable: true,\r\n    selectMirror: true,\r\n    dayMaxEvents: true,\r\n    locale: 'ro',\r\n    select: this.handleDateSelect.bind(this),\r\n    eventClick: this.handleEventClick.bind(this),\r\n    eventsSet: this.handleEvents.bind(this),\r\n  };\r\n  currentEvents: EventApi[] = [];\r\n\r\n  constructor(\r\n    private changeDetector: ChangeDetectorRef,\r\n    private IdUserService: IdUserService,\r\n    private http: HttpClient,\r\n    private fb: FormBuilder\r\n  ) {\r\n    this.myDialog5 = new ElementRef(null);\r\n    selectedName: [null]\r\n  }\r\n\r\n  handleCalendarToggle() {\r\n    this.calendarVisible = !this.calendarVisible;\r\n  }\r\n\r\n  handleWeekendsToggle() {\r\n    const { calendarOptions } = this;\r\n    calendarOptions.weekends = !calendarOptions.weekends;\r\n  }\r\n\r\n  handleDateSelect(selectInfo: DateSelectArg) {\r\n    const dialog = (this.myDialog5 as ElementRef).nativeElement;\r\n    dialog.show();\r\n    const closeListener = () => {\r\n      this.title = this.CreateEventForm.get('title')?.value;\r\n      this.location = this.CreateEventForm.get('location')?.value;\r\n      const startHour = this.CreateEventForm.get('hourStart')?.value;\r\n      const endHour = this.CreateEventForm.get('hourEnd')?.value;\r\n      this.GETallAvailabilities().subscribe((response) => {\r\n        const filteredArray = response.filter((item) => {\r\n          const date = new Date(item.startDate);\r\n          const hour = date.getUTCHours();\r\n          return hour >= startHour && hour <= endHour;\r\n        });\r\n        console.log(filteredArray);\r\n        // this.names = filteredArray.map((item) => item.apiUser.name);\r\n        // const select = document.getElementById('dropdown');\r\n        // select.innerHTML = '';\r\n        // names.forEach((name) => {\r\n        //   const option = document.createElement('option');\r\n        //   option.value = name;\r\n        //   option.text = name;\r\n        //   select.appendChild(option);\r\n        // });\r\n      });\r\n      this.SavingTitle(selectInfo);\r\n      dialog.removeEventListener('close', closeListener);\r\n    };\r\n    dialog.addEventListener('close', closeListener);\r\n    this.CreateEventForm.get('title')?.reset();\r\n    this.Participant = false;\r\n  }\r\n\r\n  SavingTitle(selectInfo: DateSelectArg) {\r\n    const titleINPUT = this.title;\r\n    const calendarApi = selectInfo.view.calendar;\r\n    const locationINPUT = this.location;\r\n    calendarApi.unselect();\r\n    if (titleINPUT) {\r\n      calendarApi.addEvent({\r\n        id: createEventId(),\r\n        title: titleINPUT,\r\n        start: selectInfo.startStr,\r\n        end: selectInfo.endStr,\r\n        allDay: selectInfo.allDay,\r\n        location: locationINPUT,\r\n      });\r\n    }\r\n  }\r\n\r\n  async handleEventClick(clickInfo: EventClickArg) {\r\n    const dialog = (this.myDialog6 as ElementRef).nativeElement;\r\n    this.currentEventClicked = clickInfo.event.title;\r\n    this.currentEventClickedLOCATION =\r\n      clickInfo.event.extendedProps['location'];\r\n    this.currentEventClickedDATEsub = clickInfo.event.start?.toString()!;\r\n    this.currentEventClickedDATE = this.currentEventClickedDATEsub.substring(\r\n      0,\r\n      15\r\n    );\r\n    const dateC = new Date(this.currentEventClickedDATE);\r\n    const formatDate = new Date(dateC.toUTCString()).toISOString();\r\n    console.log(formatDate);\r\n    dialog.show();\r\n\r\n    while (!this.deleteEvent) {\r\n      await new Promise((resolve) => setTimeout(resolve, 500));\r\n    }\r\n\r\n    clickInfo.event.remove();\r\n    this.deleteEvent = false;\r\n    console.log(this.deleteEvent);\r\n  }\r\n\r\n  AddAvailability() {\r\n    const dialog = (this.myDialog2 as ElementRef).nativeElement;\r\n    dialog.show();\r\n    const date = this.SendAvailability.get('date')?.value;\r\n    const time = this.SendAvailability.get('time')?.value;\r\n    const datetime = new Date(date + 'T' + time);\r\n    const id = this.idUser;\r\n    let POSTavailability: POSTavailability = {\r\n      startDate: datetime.toISOString(),\r\n    };\r\n    console.log(\"id\",POSTavailability,\"POSTavailability\",POSTavailability)\r\n    this.POSTAvailability(id,POSTavailability).subscribe((response) => {\r\n      console.log(response)});\r\n    dialog.close();\r\n  }\r\n\r\n  POSTAvailability(id:any , availability: any) {\r\n    return this.http.post(\r\n      `${environment.BaseUrl}/Availability/users/${id}/availability`,\r\n      availability,\r\n      {\r\n        observe: 'response',\r\n        responseType: 'text',\r\n      }\r\n    );\r\n  }\r\n\r\n  handleEvents(events: EventApi[]) {\r\n    this.currentEvents = events;\r\n    this.changeDetector.detectChanges();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}